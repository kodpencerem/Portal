@page "/etkinlikekle"
@using System.ComponentModel.DataAnnotations;
@inject EtkinlikService etkinlikService
@inject NavigationManager NavigationManager

<CardComponent cardStyle="Style.primary">
    <CardHeader>
        Etkinlik Ekle
    </CardHeader>
    <CardBody>
        <EditForm EditContext="EditContext" OnValidSubmit="HandleValidSubmit">
            <ValidationSummary Model="EtkinlikModeli" />
            <div class="row">
                <div class="col-md-8">

                    <div class="mb-3">
                        <label class="form-label">Etkinlik Resmi</label>
                        <InputFile id="inputFile" @bind-Value="EtkinlikModeli.EtkinlikAdi" OnChange="@HandleInputFileChange" class="form-control form-control-lg" />
                        <ValidationMessage For="@(() => EtkinlikModeli.EtkinlikResmi)" />
                    </div>
                    @if (ImageBase64String != null)
                    {
                        <div class="mb-3">
                            <img src="@PreviewImagePath" />
                        </div>

                        <div class="input-group mb-3">
                            <span class="input-group-text">Boyut Değerleri</span>
                            <input @bind="Width" type="text" class="form-control" placeholder="Genişlik Değeri Gir:">
                            <span class="input-group-text"><i class="fas fa-times"></i></span>
                            <input @bind="Height" type="text" class="form-control" placeholder="Yükseklik Değeri Gir:">
                            <button class="btn btn-outline-secondary" type="button" @onclick="ResizeImageAsync">
                                Onayla
                            </button>
                        </div>


                    }


                    <div class="form-group">
                        <label for="EtkinlikAdi" class="control-label">Etkinlik Adı</label>
                        <input form="EtkinlikAdi" class="form-control" @bind="@etkinlikDurum.EtkinlikAdi" />
                    </div>
                    @*<div class="form-group">
                            <label for="Gender" class="control-label"></label>
                            <select @bind="@etkinlikDurum.Gender" class="form-control">
                                <option value="">-Select Gender</option>
                                <option value="Male">Male</option>
                                <option value="Female">Female</option>
                            </select>
                        </div>*@
                    <div class="form-group">
                        <label for="EtkinlikAciklama" class="control-label">Açıklama</label>
                        <input form="EtkinlikAciklama" class="form-control" @bind="@etkinlikDurum.EtkinlikAciklama" />
                    </div>
                    @*<div class="form-group">
                            <label for="EtkinlikResmi" class="control-label">Resim</label>
                            <input form="EtkinlikResmi" class="form-control" @bind="@etkinlikDurum.EtkinlikResmi" />
                        </div>*@

                </div>
            </div>

            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        <input type="button" class="btn btn-primary" @onclick="@EtkinlikOlustur" value="Ekle" />
                        <input type="button" class="btn btn-primary" @onclick="@Cancel" value="Çıkış" />
                    </div>
                </div>
            </div>
        </EditForm>

    </CardBody>
</CardComponent>

@code {


    private EditContext EditContext { get; set; }

    private EtkinlikModeliOlustur EtkinlikModeli { get; set; } = new EtkinlikModeliOlustur();

    private string ImageBase64String { get; set; }
    private string PreviewImagePath { get; set; }

    protected override void OnInitialized()
    {
        EditContext = new EditContext(EtkinlikModeli);
        EditContext.AddDataAnnotationsValidation();
    }


    private async Task HandleValidSubmit()
    {
        EtkinlikDurum etkinlikEkle = new EtkinlikDurum()
        {
            Id = EtkinlikModeli.Id,
            EtkinlikAdi = EtkinlikModeli.EtkinlikAdi,
            EtkinlikAciklama = EtkinlikModeli.EtkinlikAciklama,
            EtkinlikResmi = PreviewImagePath
        };

        await etkinlikService.EtkinlikEkle(etkinlikEkle);

        NavigationManager.NavigateTo("Etkinliklerlistem");
    }


    private async Task HandleInputFileChange(InputFileChangeEventArgs e)
    {
        await UpdatePreviewASync(e.File);
        EtkinlikModeli.EtkinlikResmi = e.File;
        EditContext.Validate();
    }

    private async Task UpdatePreviewASync(IBrowserFile browserFile)
    {
        Stream inputFileStream = browserFile.OpenReadStream();
        using MemoryStream memoryStream = new MemoryStream();
        await inputFileStream.CopyToAsync(memoryStream);
        byte[] imageBytes = memoryStream.ToArray();
        ImageBase64String = Convert.ToBase64String(imageBytes);
        PreviewImagePath = $"data:image/png;base64,{ImageBase64String}";
    }

    private int Width { get; set; }

    private int Height { get; set; }

    private async Task ResizeImageAsync()
    {
        if (Width > 0 && Height > 0)
        {
            IBrowserFile image = EtkinlikModeli.EtkinlikResmi;
            if (image != null)
            {
                image = await image.RequestImageFileAsync("image/jpg", Width, Height);
                await UpdatePreviewASync(image);
            }
        }
    }


    private class EtkinlikModeliOlustur
    {
        [Required]
        public int Id { get; set; }


        [Required]
        public string EtkinlikAdi { get; set; }

        [Required]
        public string EtkinlikAciklama { get; set; }

        [Required]
        public IBrowserFile EtkinlikResmi { get; set; }
    }



    EtkinlikDurum etkinlikDurum = new EtkinlikDurum();
    protected async void EtkinlikOlustur()
    {
        await etkinlikService.EtkinlikEkle(etkinlikDurum);
        NavigationManager.NavigateTo("Etkinliklerlistem");
    }
    void Cancel()
    {
        NavigationManager.NavigateTo("Etkinliklerlistem");
    }
}