@page "/Etkinliklerlistem"
@inject EtkinlikService etkinlikService



@if (EtkinlikleriGetir is null)
{
    <p><em>Yükleniyor... !</em></p>
}
else
{
    <div class="col-12">
        <CardComponent>
            <CardHeader>
                <div class="float-left">
                    <div class="col-md-12">
                        Etkinlikler |
                        <a href='/etkinlik/ekle' class="btn btn-primary" role="button"><i class="fa fa-user-plus"></i> Etkinlik Ekle</a>
                    </div>
                </div>
                <div style="margin-left:1080px" class="float-right">
                    <div class="chat-search">
                        <input type="text" class="form-control" placeholder="Etkinlik Ara..." />
                    </div>
                </div>
            </CardHeader>
            <CardBody>
                <table class="table">
                    <thead>
                        <tr>
                            <th class="text-center pt-3">
                                <div class="custom-checkbox custom-checkbox-table custom-control">
                                    <input type="checkbox" data-checkboxes="mygroup" data-checkbox-role="dad"
                                           class="custom-control-input" id="checkbox-all">
                                    <label for="checkbox-all" class="custom-control-label">&nbsp;</label>
                                </div>
                            </th>
                            <th>Etkinlik ID</th>
                            <th>Etkinlik Adı</th>
                            <th>Açıklama</th>
                            <th>İşlemler</th>

                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var etkinlik in EtkinlikleriGetir)
                        {
                            <tr>
                                <td class="text-center pt-2">
                                    <div class="custom-checkbox custom-control">
                                        <input type="checkbox" data-checkboxes="mygroup" class="custom-control-input"
                                               id="checkbox-1">
                                        <label for="checkbox-1" class="custom-control-label">&nbsp;</label>
                                    </div>
                                </td>
                                <td>@etkinlik.Id</td>
                                <td>@etkinlik.EtkinlikAdi</td>
                                <td>@etkinlik.EtkinlikAciklama</td>

                                <td>
                                    <a href="@($"etkinlik/detay/{etkinlik.Id}")" class="btn btn-primary">Detay</a>
                                    <a href='/etkinlik/duzenle/@etkinlik.Id' class="btn btn-info btn-outline-dark" role="button">Düzenle</a>
                                    <button class="btn btn-danger" data-toggle="modal" data-target="#deleteEmpModal"
                                            @onclick="@(() => {DialogGorunur="block"; SilmeyiOnayla(etkinlik.Id);})">
                                        Sil
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </CardBody>
        </CardComponent>

    </div>
}


@code {

    public ModalComponent ModalDialog { get; set; }

    protected string SearchString { get; set; }

    protected string DialogGorunur { get; set; } = "none";

    protected List<EtkinlikDurum> etkinlikDurumlari = new List<EtkinlikDurum>();

    protected List<EtkinlikDurum> etkinlikAra = new List<EtkinlikDurum>();

    protected EtkinlikDurum etkinlik = new EtkinlikDurum();

    protected void SilmeyiOnayla(int etkinlikId)
    {
        ModalDialog.Open();
        etkinlik = etkinlikDurumlari.FirstOrDefault(x => x.Id == etkinlikId);
    }

    List<EtkinlikDurum> EtkinlikleriGetir;
    protected override async Task OnInitializedAsync()
    {
        EtkinlikleriGetir = await Task.Run(() => etkinlikService.TumEtkinlikleriGetir());
    }


    protected void DuyuruFilterelemeYap()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            etkinlikDurumlari = etkinlikAra.Where(
            x => x.EtkinlikAdi.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1).ToList();
        }
        else
        {
            etkinlikDurumlari = etkinlikAra;
        }
    }



}


<style>
    .row {
        display: -ms-flexbox;
        display: -webkit-box;
        display: flex;
        -ms-flex-wrap: wrap;
        flex-wrap: wrap;
        margin-top: -15px;
        margin-right: -15px;
        margin-left: -15px;
    }
</style>