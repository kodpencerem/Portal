@page "/authentication/login"
@using VedasPortal.Providers
@using Blazored.LocalStorage
@using VedasPortal.Entities.Models.User
@using System.Net.Http
@using System.Net.Http.Json
@layout LoginLayout
<div class="wrapper fadeInDown">
    <div id="formContent">
        <!-- Icon -->
        <div class="fadeIn first">
            <img src="/img/password.png" id="icon" alt="User Icon" />
        </div>

        <!-- Login Form -->
        <EditForm Model="loginModel" OnValidSubmit="UserLogin">
            <DataAnnotationsValidator />
            <Blazorise.ValidationSummary />
            <input type="text" id="login" class="fadeIn second" @bind-value="loginModel.UserName" name="login" placeholder="Kullanıcı Adı">
            <input type="password" id="password" class="fadeIn third" @bind-value="loginModel.Password" name="login" placeholder="Parola">
            @if (!string.IsNullOrEmpty(hata))
            {
                <p style="color:red;font-size:24px">@hata</p>
            }
            <input type="submit" class="fadeIn fourth" value="@loginText" disabled="@(btnLoginDisabled)" />
        </EditForm>

    </div>
</div>

@code {

    [Inject]
    protected AppAuthenticationStateProvider authProvider { get; set; }
    [Inject]
    protected ILocalStorageService localStorageService { get; set; }

    [Inject]
    protected HttpClient httpClient { get; set; }

    [Inject]
    protected NavigationManager nav { get; set; }

    protected LoginModel loginModel { get; set; } = new LoginModel();

    protected string hata;
    protected string loginText = "Giriş Yap";

    public bool btnLoginDisabled { get; set; } = false;

    protected async Task UserLogin()
    {
        hata = null;
        loginText = "Giriş Yapılıyor...";
        btnLoginDisabled = true;
        StateHasChanged();
        //loginModel.UserName = Encrypt(loginModel.UserName);
        //loginModel.Password = Encrypt(loginModel.Password);
        var result = await httpClient.PostAsJsonAsync<LoginModel>("Auth/Login", loginModel);
        if (result.IsSuccessStatusCode)
        {
            var token = await result.Content.ReadAsStringAsync();
            await localStorageService.SetItemAsync("bearerToken", token);
            await authProvider.SignIn();

            httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            var returnUrl = nav.QueryString("returnUrl");
            if (string.IsNullOrEmpty(returnUrl))
                returnUrl = "";
            nav.NavigateTo(returnUrl);

        }
        else
        {
            hata = await result.Content.ReadAsStringAsync();
            StateHasChanged();
        }
        loginText = "Giriş Yap";
        btnLoginDisabled = false;
        StateHasChanged();

    }

    
} 