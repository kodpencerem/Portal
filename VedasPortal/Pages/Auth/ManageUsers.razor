@page "/manageusers"
@using VedasPortal.Entities.Models.User
@using VedasPortal.Services.AuthServices
@attribute [Authorize(Roles = "Admin")]

@inject IManageUsersService _usersService


<AuthorizeView>
    <Authorized>
        <div class="col-12">
            <CardComponent cardStyle="Style.primary">
                <CardHeader>
                    <div class="float-left">
                        <div class="col-md-12">
                            Kullanıcılar &nbsp;||&nbsp;<button class="btn btn-primary float-right" @onclick="AddNewUser">Yeni Kullanıcı Ekle</button>
                        </div>
                    </div>

                </CardHeader>
                <CardBody>
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col">
                                <BlazorTable.Table TableItem="ApplicationUser" Items="_allUsers" PageSize="20" ColumnReorder="true" class="table">
                                    <BlazorTable.Column TableItem="ApplicationUser" Title="Adınız" Field="@(x => x.FirstName)" Sortable="true" DefaultSortColumn="true" />
                                    <BlazorTable.Column TableItem="ApplicationUser" Title="Soyadınız" Field="@(x => x.LastName)" Sortable="true" />
                                    <BlazorTable.Column TableItem="ApplicationUser" Title="Email" Field="@(x => x.Email)" Sortable="true">
                                        <Template Context="_context">
                                            <a href="mailto:@_context.Email">@_context.Email</a>
                                        </Template>
                                    </BlazorTable.Column>
                                    <BlazorTable.Column TableItem="ApplicationUser" Title="" Width="20%">
                                        <Template Context="_context">
                                            <!-- Geçerli Kullanıcıyı Düzenleme -->
                                            <button class="btn btn-sm btn-primary"
                                                    @onclick="(() => EditUser(_context))">
                                                Düzenle
                                            </button>
                                            <!-- Kullanıcıdan rolünü silme -->
                                            <button class="btn btn-sm btn-warning"
                                                    @onclick="(() => AddRemoveUserRoles(_context))">
                                                Roller
                                            </button>
                                            <!-- Yeni Şifre Ataması Yapma -->
                                            <button class="btn btn-sm btn-danger"
                                                    @onclick="(() => GeneratePassword(_context))">
                                                <i class="oi oi-key"></i>
                                                Yeni Şifre Ata
                                            </button>
                                        </Template>
                                    </BlazorTable.Column>
                                    <Pager ShowPageNumber="true" ShowTotalCount="true" ShowPageSizes="true" />
                                </BlazorTable.Table>

                                @if (ShowPopup)
                                {
                                    <EditUserModal ClosePopup="ClosePopup" CurrentUserRoles="@CurrentUserRoles" DeleteUser="DeleteUser" objUser="@objUser" SaveUser="SaveUser" strError="@strError" />
                                }

                                @if (ShowUserRolesPopup)
                                {
                                    <!-- Bu, kullanıcı rolleri oluşturmak veya düzenlemek için açılan  penceredir -->
                                    <EditUserRolesModal AllRoles="@_allRoles" UserRoles="@_userRoles" CurrentUserRoles="@CurrentUserRoles" objUser="@objUser" AddRoleToUser="AddRoleToUser" RemoveRoleFromUser="RemoveRoleFromUser" strError="@strError" ClosePopup="ClosePopup" />
                                }

                                @if (ShowPasswordPopup)
                                {
                                    <PasswordModal ClosePopup="@ClosePopup" objUser="@objUser" NewUserPassword="@NewUserPassword" />
                                }
                            </div>
                        </div>
                    </div>

                </CardBody>
            </CardComponent>
        </div>

    </Authorized>
    <NotAuthorized>
        <p>Giriş Yapmadınız.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    // Seçili olan kullanıcıyı eklemek veya düzenlemek için kullanılan özellik
    ApplicationUser objUser = new ApplicationUser();

    string CurrentUserRoles { get; set; }

    // Yeni kullanıcı şifresini göstermek için
    string NewUserPassword { get; set; }

    // Mevcut kullanıcıları görüntülemek için koleksiyon
    List<ApplicationUser> _allUsers = new List<ApplicationUser>();

    // Kullanıcıya bir rol eklerken roller açılır menüsünde görüntülenecek roller
    List<string> _allRoles = new List<string>();

    // Kullanıcıdan bir rol kaldırılırken roller açılır menüsünde görüntülenecek roller
    List<string> _userRoles = new List<string>();

    // Olası hataları tutmak için
    string strError = "";

    // Pop-up'ı göstermeyi etkinleştirmek için
    bool ShowPopup = false;

    // Kullanıcı Gurup Rolleri Açılır Penceresinin gösterilmesini etkinleştirmek için
    bool ShowUserRolesPopup = false;

    // Kullanıcı Rolleri Açılır Penceresinin gösterilmesini etkinleştirmek için
    bool ShowPasswordPopup = false;

    protected override void OnInitialized()
    {
        _allRoles = _usersService.GetAllRoles();
        GetUsers();
    }


    void AddNewUser()
    {
        // Yeni Kullanıcı
        objUser = new ApplicationUser();
        // Kimliği boş olarak ayarlayın, böylece yeni bir kayıt olduğunu bilelim
        objUser.Id = "";
        //Tüm roller listesini sıfırla
        _allRoles = _usersService.GetAllRoles();
        // Popup aç
        ShowPopup = true;
    }

    async Task SaveUser()
    {
        try
        {
            if (objUser.Id != "")
            {
                // Kullanıcıyı getir
                var user = await _usersService.GetUser(objUser.Id);

                user.Email = objUser.Email;
                user.FirstName = objUser.FirstName;
                user.LastName = objUser.LastName;

                // Güncelle
                await _usersService.UpdateUser(user);
            }
            else
            {
                // Yeni kullanıcı ekle
                var NewUser = new ApplicationUser
                {
                    UserName = objUser.Email,
                    Email = objUser.Email,
                    FirstName = objUser.FirstName,
                    LastName = objUser.LastName
                };

                var result = await _usersService.AddUser(NewUser);

                if (string.IsNullOrWhiteSpace(result))
                {
                    strError = "Yeni kullanıcı oluşturulurken beklenmeyen bir hata oluştu.";
                    // Açılır pencereyi açık tutar işlem bitene dek
                    return;
                }
                else
                {
                    NewUserPassword = result;
                }
            }
            // Popupu kapat
            ShowPopup = false;
            // Kullanıcı listesini yenile
            GetUsers();

            if (objUser.Id == "")
            {
                //Şifreyi göster
                ShowPassword();
            }
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }

    async Task EditUser(ApplicationUser _ApplicationUser)
    {
        // Seçili kullanıcıyı geçerli kullanıcı olarak ayarla
        objUser = _ApplicationUser;
        // Kullanıcıyı getir
        var user = await _usersService.GetUser(objUser.Id);
        if (user != null)
        {
            var userRoles = await _usersService.GetUserRoles(user.Id);
            CurrentUserRoles = string.Join(", ", userRoles.ToArray());
        }
        // Popup aç
        ShowPopup = true;
    }

    async Task DeleteUser()
    {
        // Kullanıcıyı getir
        var user = await _usersService.GetUser(objUser.Id);
        if (user != null)
        {
            // Kullanıcıyı sil
            await _usersService.DeleteUser(user);
        }
        // Popup kapat
        ShowPopup = false;
        // Kullanıcı listesini yenile
        GetUsers();
    }
    
    void ClosePopup()
    {
        // Popup kapat
        ShowPopup = false;
        ShowUserRolesPopup = false;
        ShowPasswordPopup = false;
        strError = "";
    }

    public void GetUsers()
    {
        // Tüm hata mesajlarını temizle
        strError = "";
        // Kullanıcıları tutmak için koleksiyon
        _allUsers = _usersService.GetAllUsers();
    }

    // Rol yönetimi
    async Task AddRemoveUserRoles(ApplicationUser _ApplicationUser)
    {
        // Seçili kullanıcıyı geçerli kullanıcı olarak ayarla
        objUser = _ApplicationUser;
        // Kullanıcıyı getir
        var user = await _usersService.GetUser(objUser.Id);
        if (user != null)
        {
            var userRoles = await _usersService.GetUserRoles(user.Id);
            CurrentUserRoles = string.Join(", ", userRoles.ToArray());

            //Yalnızca bu kullanıcıya atanan roller
            _userRoles = await _usersService.GetUserRoles(user.Id);

            //Yalnızca bu kullanıcıya atanmamış roller
            _allRoles = _usersService.GetAllRoles().Where(m => !_userRoles.Contains(m)).ToList();
        }
        // Rol Sil Açılır Penceresini Göster
        ShowUserRolesPopup = true;
    }

    async Task RemoveRoleFromUser(string SelectedUserRole)
    {
        // Kullanıcıyı getir
        var user = await _usersService.GetUser(objUser.Id);
        if (user != null)
        {
            if (SelectedUserRole != "" && SelectedUserRole != null)
            {
                // Rolü sil
                await _usersService.RemoveRoleFromUser(user.Id, SelectedUserRole);
            }
        }
        // pencereyi kapat
        ShowUserRolesPopup = false;
        // Listeyi yenile
        GetUsers();
    }

    async Task AddRoleToUser(string SelectedUserRole)
    {
        // Kullanıcıyı getir
        var user = await _usersService.GetUser(objUser.Id);
        if (user != null)
        {
            if (SelectedUserRole != "" && SelectedUserRole != null)
            {
                // Kullanıcı rolü sil
                await _usersService.AddRoleToUser(user.Id, SelectedUserRole);
            }
        }
        // pencereyi kapat
        ShowUserRolesPopup = false;
        // Listeyi yenile
        GetUsers();
    }


    // Şifre yönetimi
    void ShowPassword()
    {
        ShowPasswordPopup = true;
    }

    async Task GeneratePassword(ApplicationUser _ApplicationUser)
    {
        // Seçili kullanıcıyı geçerli kullanıcı olarak ayarla
        objUser = _ApplicationUser;

        var result = await _usersService.GenerateNewPassword(_ApplicationUser);

        if (string.IsNullOrWhiteSpace(result))
        {
            strError = "Yeni kullanıcı oluşturulurken beklenmeyen bir hata oluştu.";
            // Açılır pencereyi açık tutun
            return;
        }
        else
        {
            NewUserPassword = result;
        }

        ShowPassword();
    }

}

<style>
    .modal-content {
        max-width: 100%;
        border: none;
        box-shadow: 0 3px 8px rgb(0 0 0 / 5%);
        margin-top: 200px;
    }
</style>