@page "/manageroles"
@attribute [Authorize(Roles = "Admin")]
@using Microsoft.AspNetCore.Identity;
@using VedasPortal.Services.AuthServices

@inject IManageRolesService _rolesService

<AuthorizeView>
    <Authorized>
        <div class="col-12">
            <CardComponent cardStyle="Style.primary">
                <CardHeader>
                    <div class="float-left">
                        <div class="col-md-12">
                            Kullanıcı Rolleri &nbsp;||&nbsp;<button class="btn btn-primary float-right" @onclick="AddNewRole">Yeni Rol Ekle</button>
                        </div>
                    </div>
                    
                </CardHeader>
                <CardBody>
                    <div class="container-fluid">

                        <div class="table-responsive">
                            <table class="table table-striped" id="table-2">
                                <thead>
                                    <tr>
                                        <th class="text-center pt-3">
                                            <div class="custom-checkbox custom-checkbox-table custom-control">
                                                <input type="checkbox" data-checkboxes="mygroup" data-checkbox-role="dad"
                                                       class="custom-control-input" id="checkbox-all">
                                                <label for="checkbox-all" class="custom-control-label">&nbsp;</label>
                                            </div>
                                        </th>
                                        <th>Rol Id</th>
                                        <th>Adı</th>
                                        <th>İşlemler</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var role in AllRoles)
                                    {
                                        <tr>
                                            <td class="text-center pt-2">
                                                <div class="custom-checkbox custom-control">
                                                    <input type="checkbox" data-checkboxes="mygroup" class="custom-control-input"
                                                           id="checkbox-1">
                                                    <label for="checkbox-1" class="custom-control-label">&nbsp;</label>
                                                </div>
                                            </td>
                                            <td>@role.Id.Substring(0, 10)</td>
                                            <td>@role.Name</td>
                                            <td>
                                                <!-- Geçerli rolü düzenle -->
                                                <button class="btn btn-primary"
                                                        @onclick="(() => EditRole(role))">
                                                    Düzenle
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>

                            @if (ShowPopup)
                            {
                                <!--Bu, bir rol oluşturmak veya düzenlemek için açılır penceredir -->
                                <EditRoleModal SaveRole="SaveRole" DeleteRole="DeleteRole" ClosePopup="ClosePopup" objRole="@objRole" strError="@strError" />
                            }
                        </div>
                    </div>

                </CardBody>
            </CardComponent>

        </div>
    </Authorized>
    <NotAuthorized>
        <p>Giriş Yapmadınız.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    IdentityRole objRole = new IdentityRole();
    List<IdentityRole> AllRoles = new List<IdentityRole>();
    string strError = "";
    bool ShowPopup = false;

    protected override void OnInitialized()
    {
        GetRoles();
    }

    void AddNewRole()
    {
        objRole = new IdentityRole();
        ShowPopup = true;
    }

    async Task SaveRole()
    {
        try
        {
            var role = await _rolesService.GetRole(objRole.Id);
            if (role == null)
            {
                await _rolesService.AddRole(objRole.Name);
            }
            else
            {
                role.Id = objRole.Id;
                role.Name = objRole.Name;
                role.NormalizedName = objRole.Name;
                role.ConcurrencyStamp = objRole.ConcurrencyStamp;
                await _rolesService.UpdateRole(role);
            }
            ShowPopup = false;
            GetRoles();
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }

    void EditRole(IdentityRole _role)
    {
        objRole = _role;
        ShowPopup = true;
    }

    async Task DeleteRole()
    {
        ShowPopup = false;
        var role = await _rolesService.GetRole(objRole.Id);
        if (role != null)
        {
            await _rolesService.DeleteRole(role.Id);
        }
        GetRoles();
    }

    void ClosePopup()
    {
        ShowPopup = false;
    }

    public void GetRoles()
    {
        strError = "";
        AllRoles = _rolesService.GetAllRoles();
    }

    [Inject]
    public IJSRuntime JsRun { get; set; }
    protected override async void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            await JsRun.InvokeVoidAsync("dataTables");
        }
    }
}


<style>
    .modal-content {
        max-width: 100%;
        border: none;
        box-shadow: 0 3px 8px rgb(0 0 0 / 5%);
        margin-top: 200px;
    }

    .row {
        display: -ms-flexbox;
        display: -webkit-box;
        display: flex;
        -ms-flex-wrap: wrap;
        flex-wrap: wrap;
        margin-top: -15px;
        margin-right: -15px;
        margin-left: -15px;
    }
</style>