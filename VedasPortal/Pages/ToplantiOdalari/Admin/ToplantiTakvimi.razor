@page "/toplantitakvimi"
@inject IJSRuntime jsRun

@using VedasPortal.Models.ToplantiTakvimi
@using VedasPortal.Repository.Interface
<div>
    <div class="lnb-new-schedule">
        <button id="btn-new-schedule" type="button" class="btn btn-default btn-block lnb-new-schedule-btn" data-toggle="modal">
            Yeni Bir Takvim Ekle
        </button>
    </div>
    <CardComponent cardStyle="Style.primary">
        <CardBody>
            <div id="lnb-calendars" class="lnb-calendars">
                <div>
                    <div class="lnb-calendars-item">
                        <label>
                            <input class="tui-full-calendar-checkbox-square" type="checkbox" value="all" checked>
                            <span></span>
                            <strong>Tümünü Seç</strong>
                        </label>
                    </div>
                </div>
                <div id="takvimListesi" class="lnb-calendars-d1">
                </div>
            </div>
        </CardBody>
    </CardComponent>
</div>


<div id="right">
    <div id="menu">
        <span class="dropdown">
            <button id="dropdownMenu-calendarType" class="btn btn-default btn-sm dropdown-toggle" type="button" data-toggle="dropdown"
                    aria-haspopup="true" aria-expanded="true">
                <i id="calendarTypeIcon" class="calendar-icon ic_view_month" style="margin-right: 4px;"></i>
                <span id="calendarTypeName">Görüntüleme Biçimi</span>&nbsp;
            </button>

            <ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenu-calendarType">
                <li role="presentation">
                    <a class="dropdown-menu-title" role="menuitem" data-action="toggle-daily">
                        <i class="calendar-icon ic_view_day"></i>Günlük
                    </a>
                </li>
                <li role="presentation">
                    <a class="dropdown-menu-title" role="menuitem" data-action="toggle-weekly">
                        <i class="calendar-icon ic_view_week"></i>Haftalık
                    </a>
                </li>
                <li role="presentation">
                    <a class="dropdown-menu-title" role="menuitem" data-action="toggle-monthly">
                        <i class="calendar-icon ic_view_month"></i>Aylık
                    </a>
                </li>
                <li role="presentation">
                    <a class="dropdown-menu-title" role="menuitem" data-action="toggle-weeks2">
                        <i class="calendar-icon ic_view_week"></i>2 Haftalık
                    </a>
                </li>
                <li role="presentation">
                    <a class="dropdown-menu-title" role="menuitem" data-action="toggle-weeks3">
                        <i class="calendar-icon ic_view_week"></i>3 Haftalık
                    </a>
                </li>
                <li role="presentation" class="dropdown-divider"></li>
                <li role="presentation">
                    <a role="menuitem" data-action="toggle-workweek">
                        <input type="checkbox" class="tui-full-calendar-checkbox-square" value="toggle-workweek" checked>
                        <span class="checkbox-title"></span>Hafta Sonları
                    </a>
                </li>
                <li role="presentation">
                    <a role="menuitem" data-action="toggle-start-day-1">
                        <input type="checkbox" class="tui-full-calendar-checkbox-square" value="toggle-start-day-1">
                        <span class="checkbox-title"></span>Haftayı Pazartesi Günü İle Başlatın
                    </a>
                </li>
                <li role="presentation">
                    <a role="menuitem" data-action="toggle-narrow-weekend">
                        <input type="checkbox" class="tui-full-calendar-checkbox-square" value="toggle-narrow-weekend">
                        <span class="checkbox-title"></span>Hafta İçi Günleri Gör
                    </a>
                </li>
            </ul>
        </span>

        <span id="menu-navi">
            <button type="button" class="btn btn-default btn-sm move-today" data-action="move-today">Bugün</button>
            <button type="button" class="btn btn-default btn-sm move-day" data-action="move-prev">
                <i class="calendar-icon ic-arrow-line-left" data-action="move-prev"></i>
            </button>
            <button type="button" class="btn btn-default btn-sm move-day" data-action="move-next">
                <i class="calendar-icon ic-arrow-line-right" data-action="move-next"></i>
            </button>
        </span>

        <span id="aralikSecimi" class="render-range"></span>
        <div id="calendar">
            
        </div>
    </div>
</div>
@code{
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await jsRun.InvokeVoidAsync("tuiApp");

        }
    }



}


@code {


    [Inject]
    public IBaseRepository<Models.ToplantiTakvimi.ToplantiTakvimi> ToplantiServisi { get; set; }

    [Parameter]
    public DateTime ToplantiPlanla { get; set; }
    protected string Title = "Ekle";

    Models.ToplantiTakvimi.ToplantiTakvimi dayEvent = new Models.ToplantiTakvimi.ToplantiTakvimi()
    {
        BaslangicTarihi = DateTime.Now,
        BitisTarihi = DateTime.Now,
        Konu = ""
    };
    [Parameter]
    public int ToplantiId { get; set; }

    protected IEnumerable<Models.ToplantiTakvimi.ToplantiTakvimi> Toplantilar { get; set; }

    protected IEnumerable<Models.ToplantiTakvimi.ToplantiTakvimi> TumToplantilariGetir()
    {
        Toplantilar = ToplantiServisi.GetAll();

        return Toplantilar;

    }

    protected override Task OnInitializedAsync()
    {
        TumToplantilariGetir();
        return Task.CompletedTask;
    }

    protected void Kayit()
    {
        ToplantiServisi.AddUpdate(dayEvent);

    }
    protected override void OnParametersSet()
    {
        if (ToplantiId != 0)
        {
            Title = "Duzenle";
            dayEvent = ToplantiServisi.Get(ToplantiId);
            //DuyuruDosya = duyuru.Dosya.FirstOrDefault();

        }
    }

    protected void SilmeyiOnayla(int toplantiId)
    {
        ModalDialog.Open();
        dayEvent = Toplantilar.FirstOrDefault(x => x.Id == toplantiId);
    }
    public ModalComponent ModalDialog { get; set; }
    protected string DialogGorunur { get; set; } = "none";

    protected void Sil()
    {
        if (dayEvent.Id == 0)
            return;

        ToplantiServisi.Remove(dayEvent.Id);
        dayEvent = new Models.ToplantiTakvimi.ToplantiTakvimi();
        TumToplantilariGetir();
    }

    public void Temizle()
    {
        dayEvent = null;
    }
}