@page "/dosyalar"
@using Newtonsoft.Json
@using Syncfusion.Blazor.FileManager
@using System.Text
@using IO = System.IO
@using VedasPortal.Entities.Models.Dosya
@using VedasPortal.Entities.Models.Dosya.FileManager;
@using Syncfusion.Blazor.Popups

<div class="col-12">
    <CardComponent cardStyle="Style.primary" MinHeighth="650px">
        <CardHeader>
            Dosya Yoneticisi
        </CardHeader>
        <CardBody>

            <div class="control-section">
                <div id="fullLayout" class="e-full-layout">

                    @*Ýçerik Kýsmý*@

                    <div id="LayoutContent" class="e-mainLayout-content">

                        <SfSidebar @ref="_sidebar"
                                   Animate="false"
                                   Target=".e-mainLayout-content"
                                   MediaQuery="(min-width: 600px)"
                                   Width="250px" Type=SidebarType.Over
                                   EnableGestures="false"
                                   OnClose="SidebarClose"
                                   OnOpen="SidebarOpen">
                            <ChildContent>



                                @*sidebar ayarlarý*@
                                <div id="LeftTreeContainer" class="e-left-tree-contain">
                                    <SfTreeView @ref="_treeObj"
                                                CssClass="e-left-tree"
                                                TValue="OptionsDataModel"
                                                SelectedNodes="@_selectedTreeItem">
                                        <TreeViewFieldsSettings Id="Id"
                                                                TValue="OptionsDataModel"
                                                                DataSource=@_optionsData
                                                                IconCss="Icon"
                                                                Selected="Select"
                                                                Text="Name">
                                        </TreeViewFieldsSettings>
                                        <TreeViewEvents TValue="OptionsDataModel"
                                                        NodeSelected="TreeSelect">
                                        </TreeViewEvents>
                                    </SfTreeView>


                                </div>
                            </ChildContent>
                        </SfSidebar>

                        <div id="RightLayout" class="e-right-layout" style="margin-left:255px !important">
                            @*Dosya yönetici kýsmý*@
                            <SfFileManager @ref="_fileManager"
                                           Height="600px"
                                           SelectedItems="@SelectedItems"
                                           Path="@Path"
                                           ShowThumbnail="@(Field!="Trash")"
                                           PopupTarget="BODY"
                                           AllowDragAndDrop="false">
                                <FileManagerAjaxSettings Url=@(NavigationManager.BaseUri + "api/"+ (Field=="Shared"?"SharedFiles":(Field=="Trash"?"Trash":"FileManager"))+"/FileOperations")
                                                         GetImageUrl=@(NavigationManager.BaseUri + "api/"+(Field=="Shared"?"SharedFiles":(Field=="Trash"?"Trash":"FileManager"))+"/GetImage")
                                                         DownloadUrl=@(NavigationManager.BaseUri + "api/"+(Field=="Shared"?"SharedFiles":(Field=="Trash"?"Trash":"FileManager"))+"/Download")
                                                         UploadUrl=@(NavigationManager.BaseUri + "api/"+(Field=="Shared"?"SharedFiles":(Field=="Trash"?"Trash":"FileManager"))+"/Upload")>
                                </FileManagerAjaxSettings>
                                <FileManagerToolbarSettings Items="@_toolItems"></FileManagerToolbarSettings>
                                <FileManagerContextMenuSettings File="@_fileMenu"
                                                                Folder="@_folderMenu"
                                                                Layout="@_layoutMenu">
                                </FileManagerContextMenuSettings>
                                <FileManagerNavigationPaneSettings Visible="false"></FileManagerNavigationPaneSettings>
                                <FileManagerEvents OnSend="BeforeSend"
                                                   ToolbarCreated="ToolbarCreate"
                                                   MenuOpened="MenuOpen"
                                                   OnMenuClick="MenuClick"
                                                   OnFileOpen="FileOpen"
                                                   BeforePopupOpen="PopupBefore"
                                                   PopupOpened="PopupOpened"
                                                   PopupClosed="PopupClosed">
                                </FileManagerEvents>
                            </SfFileManager>
                            <div id="file-overlay" class="e-file-overlay @_fileOverlayDisplay"></div>
                        </div>

                    </div>
                </div>

                <SfDialog Width="335px" @ref="_dialog" Target="#filemanager" IsModal="true" @bind-Visible="_isUnSupported">
                    <DialogTemplates>
                        <Header>@_fileName</Header>
                        <Content>
                            @if (Constants.Mp4 == ".mp4")
                            {

                                <video id="videoTagId" controls="controls" width="400px" height="262px">
                                    <source src=@source>
                                </video>

                            }
                            else
                            {
                                <p>Bu Icerik Onizlenemez</p>
                            }

                        </Content>
                    </DialogTemplates>
                    <DialogEvents OnOpen="open" Closed="@DlgClose"></DialogEvents>
                    <DialogButtons>
                        <DialogButton Content="OK" IsPrimary="true" OnClick="@DlgButtonClick" />
                    </DialogButtons>
                    <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
                </SfDialog>

            </div>
        </CardBody>
    </CardComponent>
</div>

@code {
    private SfFileManager _fileManager;
    private SfTreeView<OptionsDataModel> _treeObj;
    public FileManagerDirectoryContent _content;
    private SfSidebar _sidebar;
    private SfDialog _dialog;
    private bool ShowThumbnail = true;
    private bool _isThumbNailChange = false;
    private string[] _selectedTreeItem = new string[] { "1" };
    private int _dialogCount = 0;
    private string _popupVisibility = "e-hide-popup";
    private string _fileOverlayDisplay = "e-file-hide-overlay";
    private string _storageRatio = "70%";
    private string _storageValue = "70% storage used";
    private string SelectedFilename { get; set; }
    private string SelectedPath { get; set; }
    private string FileManagerId { get; set; }
    private string MenuTargetData { get; set; }
    private string MenuTargetId { get; set; }
    private bool _isUnSupported = false;
    private string OverlayStyle { get; set; } = "overlayShow";
    private string _fileName = "";
    private int _mapId = 0;
    private int starid = 1;
    public string source { get; set; } = "";
    private List<OptionsDataModel> _optionsData = new List<OptionsDataModel>() {
        new OptionsDataModel(){Name= "Tum Dosyalar", Id= "1", Select= true, Icon= "sf-icon-Allfiles"},
        new OptionsDataModel(){Name= "Son Yuklemeler", Id= "2", Select= false, Icon= "sf-icon-RecentFiles" },
        new OptionsDataModel(){Name= "Paylasilan Dosyalar", Select= false, Id= "3", Icon= "e-icons e-shared" },
        new OptionsDataModel(){Name= "Yildizli", Select= false, Id= "4", Icon= "sf-icon-Starred" },
    };
    private class OptionsDataModel
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public bool Select { get; set; }
        public string Icon { get; set; }
    }
    private string Field { get; set; } = null;
    private string Path { get; set; }
    private string[] SelectedItems { get; set; }
    private bool _treeSelectFlag = false;
    private string _treeNode = "1";
    private string[] _toolItems = new string[] { "Download", "SortBy", "Refresh", "Selection", "View", "Details" };
    private string[] _fileMenu = new string[] { "Open", "|", "Download", "Star", "|", "Details" };
    private string[] _folderMenu = new string[] { "Open", "|", "Download", "|", "Details" };
    private string[] _layoutMenu = new string[] { "SortBy", "View", "Refresh", "|", "Details", "SelectAll" };

    protected override void OnInitialized()
    {
        _fileOverlayDisplay = "e-file-show-overlay";
        Path = "/";
        SelectedItems = new string[] { };
        if (QueryHelpers.ParseQuery(NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query).TryGetValue("path", out var pathparam))
        {
            string tempPath = pathparam.First();
            if (tempPath.StartsWith("Files"))
            {
                tempPath = tempPath.Replace("Files", "");
            }
            else
            {
                if (tempPath.StartsWith("SharedFiles"))
                {
                    tempPath = tempPath.Replace("SharedFiles", "");
                }
            }
            SelectedPath = tempPath;
            Path = SelectedPath;
        }
        if (QueryHelpers.ParseQuery(NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query).TryGetValue("preview", out var param))
        {
            SelectedFilename = param.First();
            SelectedItems = new string[] { SelectedFilename };
        }
    }
    protected override void OnAfterRender(bool firstRender)
    {
        OverlayStyle = "overlayHide";
        if (!firstRender)
        {
            if (_fileManager.IsRendered && SelectedPath != null & SelectedFilename != null)
            {
                SelectedPath = SelectedFilename = null;
                _fileOverlayDisplay = "e-file-hide-overlay";
            }
        }
    }
    private void DlgButtonClick()
    {
        _isUnSupported = false;
    }
    private void DlgClose(Object args)
    {
        this.source = "";
        JSRuntime.InvokeAsync<string>("loadVideo");
        _isUnSupported = false;
    }
    public void Refresh()
    {
        _fileManager.Refresh();
    }
    private void TreeSelect(NodeSelectEventArgs args)
    {
        _fileManager.ClearSelection();
        //Seçim deðiþikliði paylaþýlan Çöp Kutusu'nu içeriyorsa, dosyanýn yenilenmesini önlemek için showThumbNail deðiþikliði, hangi refreshFiles'ý tetikler.
        _isThumbNailChange = (_treeNode == "5") || (args.NodeData.Id == "5");
        ShowThumbnail = args.NodeData.Id != "5";
        //Seçim deðiþikliði, hangi yenilemeyi tetiklediði ajax ayar deðiþikliði olarak paylaþýlan dosyalarý/Çöp Kutusu'nu içeriyorsa manuel yenilemeyi önlemek için.
        bool flag = (_treeNode == "3") || (_treeNode == "5") || (args.NodeData.Id == "3") || (args.NodeData.Id == "5");
        _selectedTreeItem[0] = _treeNode = args.NodeData.Id;
        if (_treeSelectFlag) { _treeSelectFlag = false; return; }
        switch (_treeNode)
        {
            //Son yüklenen Dosyalar
            case "2":
                _toolItems = new string[] { "Download", "SortBy", "Refresh", "Selection", "View", "Details" };
                _fileMenu = new string[] { "Open", "|", "Download", "Star", "|", "Details" };
                _folderMenu = new string[] { "Open", "|", "Download", "|", "Details" };
                _layoutMenu = new string[] { "SortBy", "View", "Refresh", "|", "Details", "SelectAll" };
                Field = "Recent";
                break;
            //Payalaþýlmak Ýstenen Dosyalar
            case "3":
                _toolItems = new string[] { "Download", "SortBy", "Refresh", "Selection", "View", "Details" };
                _fileMenu = new string[] { "Open", "|", "Download", "|", "Details" };
                _folderMenu = new string[] { "Open", "|", "Download", "|", "Details" };
                _layoutMenu = new string[] { "SortBy", "|", "View", "|", "Refresh", "|", "Details", "|", "SelectAll" };
                Field = "Shared";
                break;
            //Yýldýzlý dosyalar
            case "4":
                _toolItems = new string[] { "Download", "SortBy", "Refresh", "Selection", "View" };
                _fileMenu = new string[] { "Open", "|", "Download", "Star", "|", "Details" };
                _folderMenu = new string[] { "Open", "|", "Download", "|", "Details" };
                _layoutMenu = new string[] { "SortBy", "View", "Refresh", "|", "SelectAll" };
                Field = "Starred";
                break;
            //Silinmiþ ama geri dönüþümde bekleyen dosyalar
            case "5":
                _toolItems = new string[] { "SortBy", "Refresh", "Selection", "View", "Details" };
                _fileMenu = new string[] { "|", "Details", "|", "Restore", "EmptyTrash", "|", "SelectAll" };
                _folderMenu = new string[] { "Download", "|", "Details", "|", "Restore", "EmptyTrash", "|", "SelectAll" };
                _layoutMenu = new string[] { "SortBy", "View", "Refresh", "|", "Details", "SelectAll", "|", "Restore", "EmptyTrash" };
                Field = "Trash";
                break;

            //Tüm Dosyalar
            default:
                _toolItems = new string[] { "Download", "SortBy", "Refresh", "Selection", "View", "Details" };
                _fileMenu = new string[] { "Open", "|", "Download", "Star", "|", "Details" };
                _folderMenu = new string[] { "Open", "|", "Download", "|", "Details" };
                _layoutMenu = new string[] { "SortBy", "View", "Refresh", "|", "Details", "SelectAll" };
                Field = "AllFiles";
                break;
        }
        if (!flag)
        {
            //Filtrenin rota yolundan çalýþmasýný saðlamak için yolu sýfýrlama
            Path = "/";
            _fileManager.RefreshFiles();
        }
    }
    private void BeforeSend(BeforeSendEventArgs args)
    {
        if (_isThumbNailChange) { _isThumbNailChange = false; args.Cancel = true; return; }
        if (args.Action != "Upload")
        {
            string AjaxSettingsString = JsonConvert.SerializeObject(args.AjaxSettings);
            Dictionary<string, dynamic> AjaxSettings = JsonConvert.DeserializeObject<Dictionary<string, dynamic>>(AjaxSettingsString);
            string dataString = AjaxSettings["data"];
            Dictionary<string, dynamic> data = JsonConvert.DeserializeObject<Dictionary<string, dynamic>>(dataString);
            data.Add("RootType", Field);
            string modifiedDataString = JsonConvert.SerializeObject(data);
            AjaxSettings["data"] = modifiedDataString;
            string returnString = JsonConvert.SerializeObject(AjaxSettings);
            args.AjaxSettings = JsonConvert.DeserializeObject<object>(returnString);
        }
    }
    private void HamburgerClick()
    {
        _sidebar.Toggle();
    }
    private void ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        switch (args.Item.Id)
        {
            case "User":
                _popupVisibility = _popupVisibility == "e-hide-popup" ? "e-show-popup" : "e-hide-popup";
                break;
            case "GitHub":
                NavigationManager.NavigateTo("/");
                break;
        }
    }
    private void NewClick()
    {
        _fileManager.CreateFolder();
    }
    private void SidebarOpen()
    {
        _popupVisibility = "e-hide-popup";
        _fileOverlayDisplay = "e-file-show-overlay";
    }
    private void SidebarClose()
    {
        _popupVisibility = "e-hide-popup";
        _fileOverlayDisplay = "e-file-hide-overlay";
    }
    private void PopupBefore(BeforePopupOpenCloseEventArgs args)
    {
        _dialogCount++;
        _popupVisibility = "e-hide-popup";
    }
    private async void PopupOpened(PopupOpenCloseEventArgs args)
    {
        await JSRuntime.InvokeVoidAsync("setDialogDrag", args.Element.ID);
    }
    private void PopupClosed()
    {
        _dialogCount--;
    }
    private async void MenuOpen(MenuOpenEventArgs args)
    {

        if ((Field != "Shared") && (Field != "Trash"))
        {
            if (args.IsSubMenu && (args.MenuType == "Layout")) { return; }
            foreach (MenuItemModel menu in args.Items)
            {
                if (menu.Text == "Star")
                {
                    menu.IconCss = "sf-icon-Starred";
                }
            }
            MenuTargetId = _mapId.ToString(); _mapId++;
            await args.Target.SetAttribute<string>("data-mapId", MenuTargetId);
            MenuTargetData = JsonConvert.SerializeObject(args.FileDetails);
        }
        else if (Field == "Trash" && !args.IsSubMenu)
        {
            foreach (MenuItemModel menu in args.Items)
            {
                switch (menu.Text)
                {
                    case "Restore":
                        menu.IconCss = "e-icons e-restore";
                        break;
                    case "EmptyTrash":
                        menu.IconCss = "sf-icon-Delete";
                        menu.Text = "Delete Permanently";
                        break;
                }
            }
        }
    }
    private async void MenuClick(MenuClickEventArgs args)
    {
        if (args.Item.Id == _fileManager.ID + "_cm_star")
        {
            Dictionary<string, dynamic>[] fileDetails = JsonConvert.DeserializeObject<Dictionary<string, dynamic>[]>(MenuTargetData);
            bool isGrid = (_fileManager.View == ViewType.Details);
            string toggle = await JSRuntime.InvokeAsync<string>("toggleStar", MenuTargetId, isGrid);
            if (toggle == "Add")
            {
                ToggleStarred(fileDetails[0]["filterPath"] + fileDetails[0]["name"], true);
            }
            else if (toggle == "Remove")
            {
                ToggleStarred(fileDetails[0]["filterPath"] + fileDetails[0]["name"], false);
                if (this.Field == "Starred")
                {
                    await _fileManager.ClearSelection();
                    await _fileManager.RefreshFiles();
                }
            }
        }
        if (args.Item.Id == _fileManager.ID + "_cm_restore")
        {
            List<object> files = await _fileManager.GetSelectedFiles();
            if (files.Count != 0) { Restore(args.FileDetails); }
        }
        if (args.Item.Id == _fileManager.ID + "_cm_restoreall")
        {
            EmptyTrash();
        }
    }
    private void ToolbarCreate(ToolbarCreateEventArgs args)
    {
        List<Syncfusion.Blazor.FileManager.ItemModel> items = args.Items;
        foreach (Syncfusion.Blazor.FileManager.ItemModel item in items)
        {
            if (item.Id == _fileManager.ID + "_tb_newfolder") { item.CssClass = "e-FM-newfolder"; }
            if (item.Id == _fileManager.ID + "_tb_upload") { item.CssClass = "e-FM-upload"; }
        }
    }
    private void FileOpen(FileOpenEventArgs args)
    {
        if (Field == "Trash") { args.Cancel = true; return; }
        string dataString = JsonConvert.SerializeObject(args.FileDetails);
        Dictionary<string, dynamic> fileDetails = JsonConvert.DeserializeObject<Dictionary<string, dynamic>>(dataString);
        if (fileDetails["isFile"])
        {
            string filePath = (Field == "Shared" ? "SharedFiles" : "Files") + (fileDetails["filterPath"]);
            Dictionary<string, string> query = new Dictionary<string, string> { { "preview", fileDetails["name"] }, { "path", filePath } };
            string uri = NavigationManager.BaseUri;
            switch (fileDetails["type"])
            {
                case Constants.Zip:
                    NavigationManager.NavigateTo(QueryHelpers.AddQueryString(uri + "zip-viewer/", query));
                    break;
                case Constants.Pptx:
                    NavigationManager.NavigateTo(QueryHelpers.AddQueryString(uri + "presentation-viewer/", query));
                    break;
                case Constants.Pdf:
                    NavigationManager.NavigateTo(QueryHelpers.AddQueryString(uri + "pdf-viewer/", query));
                    break;
                case Constants.Docx:
                case Constants.Doc:
                case Constants.Rtf:
                case Constants.Txt:
                    NavigationManager.NavigateTo(QueryHelpers.AddQueryString(uri + "word-viewer/", query));
                    break;
                case Constants.Dib:
                case Constants.Jpg:
                case Constants.Jpeg:
                case Constants.Jpe:
                case Constants.Jfif:
                case Constants.Gif:
                case Constants.Tif:
                case Constants.Tiff:
                case Constants.Png:
                case Constants.Ico:
                    break;
                case Constants.Mp4:

                    if (Constants.Mp4 == ".mp4")
                    {
                        this._isUnSupported = true;
                        // update the path for source attribute.
                        string newPath = (fileDetails["filterPath"] + fileDetails["name"] + "/");
                        this.source = newPath.Replace('\\', '/');


                    }


                    break;
                default:
                    _fileName = fileDetails["name"];
                    _isUnSupported = true;
                    break;
            }
        }
        else
        {
            if ((_treeNode != "1") && (_treeNode != "3"))
            {
                _treeSelectFlag = true;
                _selectedTreeItem = new string[] { "1" };
                _treeObj.DataBind();
                args.Cancel = true;
                string newPath = (fileDetails["filterPath"] + fileDetails["name"] + "/");
                Path = newPath.Replace('\\', '/');
                _fileManager.RefreshFiles();
            }
        }
    }
    private async void FileLoad(FileLoadEventArgs args)
    {
        string dataString = JsonConvert.SerializeObject(args.FileDetails);
        Dictionary<string, dynamic> fileDetails = JsonConvert.DeserializeObject<Dictionary<string, dynamic>>(dataString);
        //Önizlemeyi ayarlamak için modül adýný ve dosyanýn türünü kontrol edin
        if (args.Module == "LargeIconsView" && (Field != "Trash") && (fileDetails["type"] == Constants.Pptx || fileDetails["type"] == Constants.Docx
|| fileDetails["type"] == Constants.Doc || fileDetails["type"] == Constants.Rtf || fileDetails["type"] == Constants.Txt || fileDetails["type"] == Constants.Pdf))
        {
            string url = GetImageUrl(fileDetails);
            DOM ele = args.Element;
            string val = Convert.ToString((await ele.GetAttribute<string>("data-uid")));
            await ele.AddClass(new string[] { "e-file-preview-image" });
            await JSRuntime.InvokeVoidAsync("setSpinnerPreview", val);
            string anm = fileDetails["name"];
            string previewImage = await JSRuntime.InvokeAsync<string>("getLocalCacheImage", anm);
            if (previewImage != null)
            {
                await JSRuntime.InvokeVoidAsync("setPreview", val, previewImage);
            }
            else
            {
                HttpRequestMessage docrequest = new HttpRequestMessage(HttpMethod.Post, NavigationManager.BaseUri + "api/Preview/GetPreview");
                docrequest.Content = new StringContent(JsonConvert.SerializeObject(new { Path = (fileDetails["filterPath"] + fileDetails["name"]) }), Encoding.UTF8, "application/json");
                HttpResponseMessage docresponse = await Http.SendAsync(docrequest);
                if (docresponse.IsSuccessStatusCode)
                {
                    string output = await docresponse.Content.ReadAsStringAsync();
                    if (output != "Error")
                    {
                        string name = fileDetails["name"];
                        await JSRuntime.InvokeVoidAsync("setLocalCacheImage", name, output);
                        await JSRuntime.InvokeVoidAsync("setPreview", val, output);
                    }
                    else
                    {
                        //Dosya türlerine ait iconu görüntüleme/Önizleme
                        var iconCss = "";
                        switch (fileDetails["type"])
                        {
                            case Constants.Docx:
                                iconCss = "e-fe-docx";
                                break;
                            case Constants.Doc:
                                iconCss = "e-fe-doc";
                                break;
                            case Constants.Rtf:
                                iconCss = "e-fe-rtf";
                                break;
                            case Constants.Pdf:
                                iconCss = "e-fe-pdf";
                                break;
                            case Constants.Pptx:
                                iconCss = "e-fe-pptx";
                                break;
                            case Constants.Mp4:
                                iconCss = "e-fe-mp4";
                                break;
                        }
                        await JSRuntime.InvokeVoidAsync("revertToIconPreview", val, iconCss);
                    }
                }
            }
        }
        // Dosyaya yýldýz ekleme
        if ((args.Module == "LargeIconsView" || args.Module == "DetailsView") && (Field != "Shared") && (Field != "Trash") && (fileDetails["starred"]))
        {

            DOM ele = args.Element;
            string val = starid.ToString();
            starid++;
            await ele.AddClass(new string[] { "e-file-star" });
            await ele.SetAttribute<string>("data-starid", val);
            bool isGrid = args.Module == "DetailsView";
            await JSRuntime.InvokeVoidAsync("showStar", val, isGrid);

        }
    }
    private async void ToggleStarred(string filePath, bool isStarred)
    {
        string url = NavigationManager.BaseUri + "api/FileManager/ToggleStarred";
        HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Post, url);
        request.Content = new StringContent(JsonConvert.SerializeObject(new { Path = filePath, Starred = isStarred }), Encoding.UTF8, "application/json");
        HttpResponseMessage response = await Http.SendAsync(request);
        string output = await response.Content.ReadAsStringAsync();
        if (response.IsSuccessStatusCode) { }
    }
    private async void Restore(object files)
    {
        string url = NavigationManager.BaseUri + "api/Trash/Restore";
        HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Post, url);
        request.Content = new StringContent(JsonConvert.SerializeObject(files), Encoding.UTF8, "application/json");
        HttpResponseMessage response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            await _fileManager.ClearSelection();
            await _fileManager.RefreshFiles();
        }
    }
    private async void EmptyTrash()
    {
        string url = NavigationManager.BaseUri + "api/Trash/EmptyTrash";
        HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Post, url);
        HttpResponseMessage response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            await _fileManager.ClearSelection();
            await _fileManager.RefreshFiles();
        }
    }
    private string GetImageUrl(Dictionary<string, dynamic> data)
    {
        //Spesifik kontroller ve adý
        string baseUrl = "/api/FileManager/GetPreviewImage";
        string imgUrl = baseUrl + "?path=" + data["filterPath"] + data["name"];
        return imgUrl;
    }

    private void open()
    {
        // need to call the load event of video
        JSRuntime.InvokeAsync<string>("loadVideo");
    }

}


<style>
    #RightLayout {
        margin-left: 255px !important
    }

    .row {
        display: -ms-flexbox;
        display: -webkit-box;
        display: flex;
        -ms-flex-wrap: wrap;
        flex-wrap: wrap;
        margin-top: -15px;
        margin-right: -15px;
        margin-left: -15px;
    }
</style>