@page "/zip-viewer"
@using Newtonsoft.Json
@using Syncfusion.Blazor.FileManager
@using System.Text
@using IO = System.IO
@using VedasPortal.Entities.Models.Dosya

<div class="col-12">
    <CardComponent cardStyle="Style.primary">
        <CardBody>
            <div class="zip-container" id="zipContainer">
                <div class="zip-overlay @OverlayStyle">
                    <div class="loader"></div>
                </div>
                <div class="toolbar">
                    <TopToolbar @ref="_topToolbar" BackClick="BackClickHandler"></TopToolbar>
                </div>
                <div class="file-viewer">
                    <SfFileManager @ref="_zipManager"
                                   CssClass="e-zip"
                                   View="ViewType.Details"
                                   Path="@ViewerPath"
                                   RootAliasName="@RootName"
                                   Height="100%"
                                   AllowMultiSelection="false">
                        <FileManagerAjaxSettings Url=@(NavigationManager.BaseUri + "api/ZipViewer/FileOperations")
                                                 GetImageUrl=@(NavigationManager.BaseUri + "api/ZipViewer/GetImage")>
                        </FileManagerAjaxSettings>
                        <FileManagerNavigationPaneSettings Visible="false"></FileManagerNavigationPaneSettings>
                        <FileManagerEvents Created="AfterCreated" OnSend="BeforeSend" OnFileOpen="FileOpen"></FileManagerEvents>
                        <FileManagerToolbarSettings Visible="false"></FileManagerToolbarSettings>
                        <FileManagerContextMenuSettings Visible="false"></FileManagerContextMenuSettings>
                        <FileManagerDetailsViewSettings ColumnResizing="false">
                            <FileManagerColumns>
                                @*Dosya adý için varsayýlan sütun*@
                                <FileManagerColumn Field="name"
                                                   HeaderText="Name"
                                                   Width="120"
                                                   Template="<span class='e-fe-text'>${name}</span>"
                                                   HeaderTextAlign=TextAlign.Left
                                                   TextAlign=TextAlign.Left
                                                   CustomAttributes="@(new { @class = "e-fe-grid-name" } )">

                                </FileManagerColumn>
                                @*Dosya boyutu için varsayýlan sütun*@
                                <FileManagerColumn Field="size"
                                                   HeaderText="Size"
                                                   Width="auto"
                                                   Template="<span class='e-fe-size'>${size}</span>"
                                                   HeaderTextAlign=TextAlign.Left TextAlign=TextAlign.Left>

                                </FileManagerColumn>
                            </FileManagerColumns>
                        </FileManagerDetailsViewSettings>
                    </SfFileManager>
                </div>
            </div>
        </CardBody>
    </CardComponent>
</div>

@code { public string ZipPath { get; set; } = null;
    public string ViewerPath { get; set; }
    public string RootName { get; set; }
    private string PreviewPath { get; set; }
    private string FileName { get; set; }
    private string SubPath { get; set; }
    private string Path { get; set; }
    public string OverlayStyle { get; set; } = "overlayHide";
    private SfFileManager _zipManager;
    private TopToolbar _topToolbar;
    private string SpinnerTarget { get; set; } = "#zipContainer";
    public bool isRootNameChange = true;
    protected override void OnInitialized()
    {
        ViewerPath = "/";
        if (QueryHelpers.ParseQuery(NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query).TryGetValue("path", out var pathparam))
        {
            Path = pathparam.First();
        }
        if (QueryHelpers.ParseQuery(NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query).TryGetValue("preview", out var param))
        {
            FileName = param.First();
            PreviewPath = Path + FileName;
        }
        if (QueryHelpers.ParseQuery(NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query).TryGetValue("subpath", out var subPathparam))
        {
            SubPath = subPathparam.First();
        }
    }
    private async void AfterCreated()
    {
        ZipPath = PreviewPath;
        string Name = IO.Path.GetFileName(PreviewPath);
        if (_topToolbar.RootName != Name)
        {
            _topToolbar.RootName = RootName = Name;
            isRootNameChange = true;
        }
        string url = NavigationManager.BaseUri + "api/ZipViewer/ExtractZip";
        HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Post, url);
        request.Content = new StringContent(JsonConvert.SerializeObject(new { Path = PreviewPath }), Encoding.UTF8, "application/json");
        HttpResponseMessage response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            _zipManager.Refresh();
        }
    }
    private void BackClickHandler()
    {
        if (SubPath != null)
        {
            Dictionary<string, string> query = new Dictionary<string, string> { { "preview", PreviewPath } };
            NavigationManager.NavigateTo(QueryHelpers.AddQueryString(NavigationManager.BaseUri + "zip-viewer/", query));
        }
        else
        {
            Dictionary<string, string> query = new Dictionary<string, string> { { "preview", FileName }, { "path", Path } };
            NavigationManager.NavigateTo(QueryHelpers.AddQueryString(NavigationManager.BaseUri, query));
        }
    }
    private void BeforeSend(BeforeSendEventArgs args)
    {
        if (isRootNameChange) { args.Cancel = true; isRootNameChange = false; return; }
        OverlayStyle = "overlayHide";
        if (args.Action == "read")
        {
            string AjaxSettingsString = JsonConvert.SerializeObject(args.AjaxSettings);
            Dictionary<string, dynamic> AjaxSettings = JsonConvert.DeserializeObject<Dictionary<string, dynamic>>(AjaxSettingsString);
            string dataString = AjaxSettings["data"];
            Dictionary<string, dynamic> data = JsonConvert.DeserializeObject<Dictionary<string, dynamic>>(dataString);
            data.Add("ZipPath", ZipPath);
            string modifiedDataString = JsonConvert.SerializeObject(data);
            AjaxSettings["data"] = modifiedDataString;
            string returnString = JsonConvert.SerializeObject(AjaxSettings);
            args.AjaxSettings = JsonConvert.DeserializeObject<object>(returnString);
        }
    }
    private void FileOpen(FileOpenEventArgs args)
    {
        string dataString = JsonConvert.SerializeObject(args.FileDetails);
        Dictionary<string, dynamic> fileDetails = JsonConvert.DeserializeObject<Dictionary<string, dynamic>>(dataString);
        if ((fileDetails["type"] == Constants.Bmp) || (fileDetails["type"] == Constants.Dib) || (fileDetails["type"] == Constants.Jpg) || (fileDetails["type"] == Constants.Jpeg)
            || (fileDetails["type"] == Constants.Jpe) || (fileDetails["type"] == Constants.Jfif) || (fileDetails["type"] == Constants.Gif) || (fileDetails["type"] == Constants.Tif)
            || (fileDetails["type"] == Constants.Tiff) || (fileDetails["type"] == Constants.Png) || (fileDetails["type"] == Constants.Ico))
        {
            args.Cancel = true;
        }
        string filePath = (fileDetails["filterPath"] + fileDetails["name"]);
        Dictionary<string, string> query = new Dictionary<string, string> { { "preview", PreviewPath }, { "subpath", filePath } };
        if (fileDetails["type"] == Constants.Zip)
        {
            NavigationManager.NavigateTo(QueryHelpers.AddQueryString(NavigationManager.BaseUri + "zip-viewer/", query));
        }
        if (fileDetails["type"] == Constants.Pptx)
        {
            NavigationManager.NavigateTo(QueryHelpers.AddQueryString(NavigationManager.BaseUri + "presentation-viewer/", query));
        }
        if (fileDetails["type"] == Constants.Pdf)
        {
            NavigationManager.NavigateTo(QueryHelpers.AddQueryString(NavigationManager.BaseUri + "pdf-viewer/", query));
        }
        if (fileDetails["type"] == Constants.Docx || fileDetails["type"] == Constants.Doc || fileDetails["type"] == Constants.Rtf || fileDetails["type"] == Constants.Txt)
        {
            NavigationManager.NavigateTo(QueryHelpers.AddQueryString(NavigationManager.BaseUri + "word-viewer/", query));
        }
    } }

<style>


    .row {
        display: -ms-flexbox;
        display: -webkit-box;
        display: flex;
        -ms-flex-wrap: wrap;
        flex-wrap: wrap;
        margin-top: -15px;
        margin-right: -15px;
        margin-left: -15px;
    }
</style>