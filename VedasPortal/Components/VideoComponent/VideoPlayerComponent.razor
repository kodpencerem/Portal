@using VedasPortal.Entities.Models.Dosya;
@using Blazored.Video;
@using Blazored.Video.Support;
@using Microsoft.AspNetCore.Components;
@using System.Collections.Generic;
@using VedasPortal.Repository.Interface;

@foreach (var videoGetir in VideoGetir.Where(x => x.AktifPasif == true && x.Uzanti == "mp4" || x.Uzanti == "mkv").ToList())
{
    <BlazoredVideo @ref="video"
                   PlayEvent="OnPlay"
                   TimeUpate="OnTimeUpdate"
                   VideoStateOptions="options"
                   class="w-100"
                   style="max-width:800px;"
                   controls="controls"
                   type="@Type.ToString()">
        <source src="Videolar/@string.Concat(videoGetir?.Adi,".",videoGetir?.Uzanti)"
                type="@Type.ToString()" />
    </BlazoredVideo>

    <div class="article-details">
        <div class="article-title">
            <h4><a href="Videolar/@string.Concat(videoGetir?.Adi,".",videoGetir?.Uzanti)"></a>@videoGetir.Adi</h4>
        </div>
        <p class="text-black">
            @((MarkupString)Aciklama)
        </p>

    </div>
}
@code {

    [Inject]
    protected IBaseRepository<Dosya> Video { get; set; }

    protected IEnumerable<Dosya> VideoGetir { get; set; } = new List<Dosya>();

    BlazoredVideo video;

    [Parameter]
    public string Width { get; set; }

    [Parameter]
    public string Heigth { get; set; }

    [Parameter]
    public string Type { get; set; }

    [Parameter]
    public string Src { get; set; }
    [Parameter]
    public string Href { get; set; }

    [Parameter]
    public string VideoBaslik { get; set; }

    [Parameter]
    public string Aciklama { get; set; }

    [Parameter]
    public Entities.Models.Dosya.Dosya SecilenVideo { get; set; }

    protected override Task OnInitializedAsync()
    {
        TumVideolariGetir();
        return Task.CompletedTask;
    }

    protected IEnumerable<Dosya> TumVideolariGetir()
    {
        VideoGetir = Video.GetAll();
        return VideoGetir;
    }

    void OnPlay(VideoState state)
    {
        var url = state?.CurrentSrc;
        // do something with this
    }
    void OnTimeUpdate(VideoState state)
    {
        var url = state?.CurrentSrc;
        var currentTime = state?.CurrentTime;
        // do something with this
    }
}