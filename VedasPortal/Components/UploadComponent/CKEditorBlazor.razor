@inherits InputTextArea
@inject IJSRuntime JSRuntime


<label class="control-label">@Label</label>
<textarea @attributes="AdditionalAttributes"
          id="@Id"
          class="@CssClass"
          value="@CurrentValue"
          onchange="EditorDataChanged"
          >
</textarea>


@code {
    string _id;

    [Parameter]
    public string Label { get; set; }
   
    [Parameter]
    public string ValuePath { get; set; }

    [Parameter]
    public string Id
    {
        get => _id ?? $"CKEditor_{uid}";
        set => _id = value;
    }

    /// <summary>
    /// Editor alanına resim gönderme işlemi için bir yol belirler
    /// </summary>
    [Parameter]
    public string UrlToPostImage { get; set; }


    /// <summary>
    /// Benzersiz bir id oluşturur.
    /// </summary>
    readonly string uid = Guid.NewGuid().ToString().ToLower().Replace("-", "");


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await JSRuntime.InvokeVoidAsync("CKEditorInterop.init", Id, UrlToPostImage, DotNetObjectReference.Create(this));

        await base.OnAfterRenderAsync(firstRender);
    }


    /// <summary>
    /// Editor alanında yapılan değişiklikleri yakalar.
    /// Değişiklikleri 'data' değerine gönderir
    /// </summary>
    /// <param name="data"></param>
    /// <returns></returns>
    [JSInvokable]
    public Task EditorDataChanged(string data)
    {
        CurrentValue = data;
        StateHasChanged();
        return Task.CompletedTask;
    }

    protected override void Dispose(bool disposing)
    {
        JSRuntime.InvokeVoidAsync("CKEditorInterop.destroy", Id);
        base.Dispose(disposing);
    }
}

<style>
    .ck.ck-editor {
        position: relative;
        height: 250px;
        width: 740px;
        min-height: 250px;
    }

    .ck.ck-editor__editable_inline {
        overflow: auto;
        padding: 0 var(--ck-spacing-standard);
        border: 1px solid transparent;
        height: 210px;
        min-height: 210px;
        scrollbar-darkshadow-color: dodgerblue;
    }
</style>