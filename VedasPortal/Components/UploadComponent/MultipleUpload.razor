@using VedasPortal.Services.FileUploadDownload;
@inject IFileUpload fileUpload;

<div class="col-6">
	<div class="form-group">
		<div class="row"
			 style="margin-top:2px">

			<div class="col-md-8">
				<InputFile OnChange="OnInputFileChange" @bind-Value="@ValueInput" multiple/>
			</div>
			<div class="col-md-4">
				<button class="btn btn-sm btn-success"
						type="button"
						@onclick="UploadFiles">
					Yükle
				</button>
			</div>
		</div>
		<br />
		@{
			// Görüntüleme ilerlemesinin ayarlanıp ayarlanmadığına bağlı olarak ilerleme oluşturmak için bir  css sınıfı oluşturur.

			var progressCss = "progress" + (displayProgress ? "" : "d-none");
			// ilerleme çubuğu genişliği, yükleme ilerlemesinin yüzdesidir
			var progressWidthStyle = progressPercent + "%";
		}
		<div class="@progressCss">
			<div class="progress-bar" role="progressbar"
				 style="width:@progressWidthStyle"
				 area-valuenow="@progressPercent"
				 aria-minvalue="0"
				 area-maxvalue="100">
			</div>
		</div>
	</div>
	<br />
	<label>@labelText</label>
	<br />
</div>
@if (previewImages.Count > 0)
{
	<h5>Seçilen Dosyalar</h5>
	<div class="card">
		<div class="row align-items-start">

			@foreach (var item in previewImages)
			{
				<div class="col-2">
					<img class="rounded float-left"
				 src="@item"
				 width="100"
				 height="100"
				 style="margin:10px" />
				</div>
			}
		</div>
	</div>
}

@code {



	private string _value;

	[Parameter] public EventCallback<string> ValueInputChanged { get; set; }

	[Parameter]
	public string ValueInput
	{
		get => _value;
		set
		{
			if (_value == value) return;
			_value = value;
			ValueInputChanged.InvokeAsync(value);
		}
	}

	// yalnızca yükleme sırasında ilerlemenin görüntülenmesini değiştirmek için kullanılır
	private bool displayProgress;
	// ilerlemeyi yüzde olarak yüklemek için
	private int progressPercent;
	// Yüklemenin sonuçlarını göstermek için bir yazı gösterir
	private string labelText = "";

	// yüklenecek seçili dosyaların listesi
	IReadOnlyList<IBrowserFile> selectedFiles;
	// dosyalar için önizleme URL'lerinin listesi
	private IList<string> previewImages = new List<string>();

	// yüklenecek dosyalarda yeni bir seçim olduğunda yöntem otomatik olarak yürütülür
	// yüklenecek dosyaları al
	private async Task OnInputFileChange(InputFileChangeEventArgs e)
	{
		// Dosya seçicide seçilen tüm dosyaları al
		var files = e.GetMultipleFiles();
		selectedFiles = files;
		foreach (var file in files)
		{
			// resim dosyası için önizleme url'si oluştur
			var imageUrl = await fileUpload.GeneratePreviewUrl(file);

			// resim url'sini önizleme url listesine ekler
			previewImages.Add(imageUrl);
		}
	}



	private async Task UploadFiles()
	{
		try
		{
			//Yüklenecek dosyalarımız olduğundan emin olmak için bir  kontrol oluşturur.
			if (selectedFiles is not null && selectedFiles.Count > 0)
			{
				// yüklenen dosyaları takip eder
				var uploaded = 0;
				// dosya yükleme esnasında bir ilerleme çubuğu açar
				displayProgress = true;

				var fileName = SaveFileToUploaded.RandomFileName + selectedFiles.FirstOrDefault().Name;
				SaveFileToUploaded.FileName = fileName;

				foreach (var file in selectedFiles)
				{
					// dosyaları eşzamansız olarak yükler
					await fileUpload.UploadFile(file);

					ValueInput = fileName;
					await ValueInputChanged.InvokeAsync(ValueInput);

					// Her başarılı yüklemeden sonra yüklenen sayıyı artır
					uploaded++;

					// yükleme ilerlemesini günceller
					progressPercent = (int)((uploaded / selectedFiles.Count) * 100);
				}
				// Yükleme bittiğinde progresbarı kapatır
				displayProgress = false;

				// Başarılı yükleme sonucu kullanıcıya gösterir
				labelText = $"{selectedFiles.Count} adet dosya başarılı bir şekilde yüklenmiştir";
			}
		}
		catch (Exception ex)
		{
			//Yükleme herhangi bir nedenle başarısız olduğunda, kullanıcıyı bilgilendirir
			labelText = $"{ex.Message} nedeniyle yükleme başarısız oldu";
		}

	} }