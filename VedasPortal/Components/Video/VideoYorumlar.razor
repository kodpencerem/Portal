@using VedasPortal.Entities.Models.Yorum
@using VedasPortal.Entities.Models.Video
@inject VedasPortal.Repository.Interface.IBaseRepository<Yorum> _yorum

<div class="component-box">

    @if (Yorumlar == null)

    {
        <p><em>Yükleniyor...</em></p>
    }

    else
    {
        @if (Yorumlar != null)
        {
            @foreach (var item in Yorumlar.Where(y => y.OnaylansinMi == true && y.VideoId != videoGetir.VideoYorum?.FirstOrDefault().VideoId).ToList())
            {
                <div class="box-card">
                    <div class="row">
                        <img width="25"
                             height="25"
                             src="/images/default.png"
                             class="comment-avatar" />
                        <h6 class="comment-content">
                            <MarkDownComponent Content="@item.Aciklama" />
                        </h6>
                    </div>
                </div>
                <br />
            }


        }


    }
    <hr />
    <EditForm Model="@yorum"
              OnValidSubmit="InsertComment">
        <DataAnnotationsValidator />

        <h5>
            Yorum @Title
        </h5>
        <br />
        <div class="col-12">
            <div class="form-group row">
                <div class="col-md-12">
                    <CKEditorBlazor Id="MyEditor1"
                                    @bind-Value=@yorum.Aciklama
                                    Label="Yorumunuz:"
                                    UrlToPostImage="images/uploaded/">
                    </CKEditorBlazor>

                </div>
                <ValidationMessage For="@(() => yorum.Aciklama)" />
            </div>

        </div>

        <div class="form-group">
            <button type="submit"
                    class="btn btn-primary">
                Gönder
            </button>
        </div>
    </EditForm>




</div>

@code {

    public Yorum yorum { get; set; } = new();

    private Video videoGetir { get; set; } = new();

    protected string Title = "Ekle";

    [Parameter]
    public IEnumerable<Yorum> Yorumlar { get; set; }

    protected IEnumerable<Yorum> TumYorumlariGetir()
    {
        Yorumlar = _yorum.GetAll();
        return Yorumlar;
    }

    protected override Task OnInitializedAsync()
    {
        TumYorumlariGetir();
        return Task.CompletedTask;
    }

    public void InsertComment()
    {
        var yorumEkle = new Yorum()
        {
            Aciklama = yorum.Aciklama,
            VideoId = videoGetir.Id
        };

        _yorum.Add(yorumEkle);
        yorum.Aciklama = string.Empty;
    } }