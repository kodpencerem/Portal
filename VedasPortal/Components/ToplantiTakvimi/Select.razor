
@typeparam TItem

@if (Items != null && Items.Count > 0)
{
    <div @onclick="@(()=> {show = !show; })" class="selectContainer d-flex flex-column justify-content-center rounded">
        <div class="d-flex justify-content-between align-items-center">
            
        <p class="m-0 ml-1 mr-1">@TimeTemplate(selected)</p>
        <div>
            <p class="m-0 ml-1 mr-1"><i class="bi bi-caret-down-fill"></i></p>
        </div>

        </div>

        @if(show){
            <div class="selectOverlay" @onclick="@(()=> {show = false; })" @onclick:stopPropagation></div>
            <div class="optionsContainer">
                @for(int i = 0; i < Items.Count; i++)
                {
                    var j = i;
                    <div @onclick="()=>SelectItem(j)" @onclick:stopPropagation>
                        <p class="m-0">@TimeTemplate(Items[i])</p>
                    </div>
                }
            </div>
        }
    </div>
}

@code {
    TItem selected;
    bool show = false;

    [Parameter]
    public int SelectFirst{ get; set; }

    [Parameter]
    public int Size{ get; set; }

    [Parameter]
    public IReadOnlyList<TItem> Items{ get; set; }

    [Parameter]
    public EventCallback<int> OnSelected{ get; set; }

    [Parameter]
    public RenderFragment<TItem> TimeTemplate{ get; set; } 

    public async void SelectItem(int i)
    {
        show = false;
        selected = Items[i];
        await OnSelected.InvokeAsync(i);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (SelectFirst < Items.Count)
            selected = Items[SelectFirst];
    }

}
