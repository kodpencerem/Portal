@using VedasPortal.Entities.Models.ToplantiTakvimi;
@using VedasPortal.Entities.ViewModels;
@inject VedasPortal.Repository.Interface.IToplantiTakvimi _toplanti
@inject VedasPortal.Repository.Interface.IBaseRepository<Toplanti> _toplantiKayit

@if (toplantiGetir != null)
{
    <div class="ToDoForm d-flex flex-column">
        <i class="bi bi-x-circle m-2 ml-auto"
           @onclick="async ()=>{await OnEditedToplanti.InvokeAsync(null);}">
        </i>

        <EditForm Model="@toplantiGetir" OnValidSubmit="EditToplanti"
                  class="flex-grow-1 d-flex flex-column align-items-center">
            <DataAnnotationsValidator />
            <CardComponent cardStyle="Style.warning">
                <CardBody>

                    <div class="d-flex justify-content-center">
                        <p class="mb-0 mr-2">
                            <label class="mb-0 d-flex align-items-center">
                                <span class="mr-2">Start:</span>
                                <TimePickerComponent OnTimeChanged="UpdateStartTime" Time="toplantiGetir.BaslangicTarihi"></TimePickerComponent>
                            </label>
                        </p>


                        <p class="mb-0 ml-2">
                            <label class="mb-0 d-flex align-items-center">
                                <span class="mr-2">End:</span>
                                <TimePickerComponent OnTimeChanged="UpdateEndTime" Time="toplantiGetir.BitisTarihi"></TimePickerComponent>
                            </label>
                        </p>
                    </div>
                    <br />
                    <div class="form-group col-md-12">
                        <label>
                            Toplantı Başlığı:
                        </label>
                        <InputText @bind-Value="toplantiGetir.Baslik"
                                   class="form-control" />
                        <ValidationMessage For="@(()=>toplantiGetir.Baslik)" />
                    </div>
                    <br />
                    <div class="form-group col-md-12">
                        <label>Toplantı Konusu:</label>
                        <InputText @bind-Value="toplantiGetir.Konu"
                                   class="form-control" />
                        <ValidationMessage For="@(()=>toplantiGetir.Konu)" />
                    </div>
                    <br />
                    <div class="form-group col-md-12">
                        <label>Katılım Sayısı Sınırı:</label>
                        <InputNumber @bind-Value="toplantiGetir.BeklenenKatilimSayisi"
                                     class="form-control" min="0" />
                        <ValidationMessage For="@(()=>toplantiGetir.BeklenenKatilimSayisi)" />
                    </div>
                    <br />
                    <div class="form-group col-md-12">
                        <label>Açıklama:</label>
                        <InputTextArea @bind-Value="toplantiGetir.Aciklama" class="form-control" />
                        <ValidationMessage For="@(()=>toplantiGetir.Aciklama)" />
                    </div>
                    <br />
                                      
                </CardBody>
                <CardFotter>
                    <button class="btn btn-primary align-self-stretch rounded-0 mt-auto"
                            type="submit">
                        Değişiklikleri Onayla
                    </button>
                </CardFotter>
            </CardComponent>

        </EditForm>
    </div>}



@code { 

    private Toplanti toplantiGetir;
    [Parameter]
    public Toplanti Duzenle { get; set; }

    [Parameter]
    public int ToplantiDuzenleId { get; set; }

    [Parameter]
    public EventCallback<Toplanti> OnEditedToplanti { get; set; }

    protected ToplantiTakvimVm takvimVm { get; set; } = new ToplantiTakvimVm();

    public ToplantiMerkezi toplantiMerkezi { get; set; }

    public int OdaId { get; set; }


    public async void EditToplanti()
    {

        this.Duzenle.BaslangicTarihi = toplantiGetir.BaslangicTarihi;
        this.Duzenle.BitisTarihi = toplantiGetir.BitisTarihi;
        this.Duzenle.Konu = toplantiGetir.Konu;
        this.Duzenle.BeklenenKatilimSayisi = toplantiGetir.BeklenenKatilimSayisi;
        this.Duzenle.Baslik = toplantiGetir.Baslik;
        this.Duzenle.Aciklama = toplantiGetir.Aciklama;
        this.Duzenle.ToplantiOdasi = toplantiGetir.ToplantiOdasi;
        var merkeziSec = takvimVm.MerkezId;
        Duzenle = _toplantiKayit.Get(ToplantiDuzenleId);
        await OnEditedToplanti.InvokeAsync(this.Duzenle);
    }

    protected override void OnParametersSet()
    {
        if (this.Duzenle != null)
        {
            toplantiGetir = new Toplanti();
            toplantiGetir.BaslangicTarihi = this.Duzenle.BaslangicTarihi;
            toplantiGetir.BitisTarihi = this.Duzenle.BitisTarihi;
            toplantiGetir.Konu = this.Duzenle.Konu;
            toplantiGetir.Aciklama = this.Duzenle.Aciklama;
            toplantiGetir.Baslik = this.Duzenle.Baslik;
            toplantiGetir.BeklenenKatilimSayisi = this.Duzenle.BeklenenKatilimSayisi;
            toplantiGetir.ToplantiOdasi = this.Duzenle.ToplantiOdasi;

        }

        base.OnParametersSet();
    }

    public void UpdateStartTime(DateTime time)
    {
        toplantiGetir.BaslangicTarihi = time;
    }

    public void UpdateEndTime(DateTime time)
    {
        toplantiGetir.BitisTarihi = time;
    }
}