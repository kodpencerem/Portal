@using System.Globalization
@using System.Collections
@using VedasPortal.Entities.Models.ToplantiTakvimi;
@using VedasPortal.Services.ToplantiServices
@inject AylikToplantiService aylikToplantilar

@if (aylikToplanti == null)
{
    <div class="loading">Yükleniyor</div> }
else
{

    <div class="container p-0 p-md-5 m-auto">
        <div class="d-flex flex-column justify-content-center align-items-center">
            <div id="year" class="d-flex align-items-center">
                <span class="changeDateButton mr-3 pr-2 pl-2" @onclick="@(()=>{AddYears(-1);})">&lsaquo;</span>
                <h3 class="mb-0">@tarih.Year</h3>
                <span class="changeDateButton ml-3 pr-2 pl-2" @onclick="@(()=>{AddYears(1);})">&rsaquo;</span>
            </div>

            <div class="mt-1 d-flex justify-content-center">
                <span class="changeDateButton mr-3 pr-2 pl-2" @onclick="@(()=>{AddMonths(-1);})">&lsaquo;</span>
                <h2 class="mb-0">@aylikToplanti.AdiniGetir</h2>
                <span class="changeDateButton ml-3 pr-2 pl-2" @onclick="@(()=>{AddMonths(1);})">&rsaquo;</span>
            </div>

        </div>
        <div id="calendarContainer" class="d-flex flex-column">
            <div id="calendarSubContainer">
                <div class="calendarHeader d-flex justify-content-start">
                    <h3>Pazartesi</h3>
                    <h3>Salı</h3>
                    <h3>Çarşamba</h3>
                    <h3>Perşembe</h3>
                    <h3>Cuma</h3>
                    <h3>Cumartesi</h3>
                    <h3>Pazar</h3>
                </div>
                <MonthComponent AylikToplantiGetir=@aylikToplanti></MonthComponent>
            </div>
        </div>
    </div>
}

@code {

    DateTime tarih;

    AylikToplanti aylikToplanti;

    Dictionary<int, AylikToplanti[]> aylar;

    [CascadingParameter]
    private Pages.ToplantiOdalari.Admin.ToplantiEkleDuzenle GunlukToplanti { get; set; }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        tarih = DateTime.Now;


        var ayGetir = aylikToplantilar.GetMonth(tarih);
        aylikToplanti = ayGetir.Item1;

        GunlukToplanti?.SetNewCalendarDay(aylikToplanti[tarih.Day - 1]);

        AylikToplanti[] gecici = new AylikToplanti[12];

        gecici[tarih.Month - 1] = aylikToplanti;
        aylar = new Dictionary<int, AylikToplanti[]>();
        aylar.Add(tarih.Year, gecici);
    }

    /// <summary>
    /// Ayları ekle
    /// </summary>
    /// <param name="n"></param>
    public void AddMonths(int n)
    {
        tarih = tarih.AddMonths(n);
        SetNewMonth();
    }

    /// <summary>
    /// Yılları ekle
    /// </summary>
    /// <param name="n"></param>
    public void AddYears(int n)
    {
        tarih = tarih.AddYears(n);
        SetNewMonth();
    }

    /// <summary>
    /// Yeni bir ay bilgisi oluştur
    /// </summary>
    private void SetNewMonth()
    {

        // kullanıcının ay yükleyip yüklemediğini kontrol eder
        if (aylar.ContainsKey(tarih.Year)
            && aylar[tarih.Year][tarih.Month - 1] != null)
            aylikToplanti = aylar[tarih.Year][tarih.Month - 1];
        else
        {

            var ayGetir = aylikToplantilar.GetMonth(tarih);
            aylikToplanti = ayGetir.Item1;

            if (aylar.ContainsKey(tarih.Year))
            {
                aylar[tarih.Year][tarih.Month - 1] = aylikToplanti;
            }
            else
            {
                AylikToplanti[] gecici = new AylikToplanti[12];
                gecici[tarih.Month - 1] = aylikToplanti;
                aylar.Add(tarih.Year, gecici);
            }
        }
    }
}