@using VedasPortal.Models.ToplantiTakvimi
@using VedasPortal.Repository.Interface

@if (displayModal)
{
    <div id="divModal">
        <div class="container">
            <div class="panel panel-default">
                <div class="panel-heading modalHeading">
                    Toplantı Planla
                </div>
                <div class="panel-body">
                    <div class="row">
                        <div class="col-md-4">
                            <label>
                                Başlangıç Tarihi
                            </label>
                        </div>
                        <div class="col-md-8">
                            <input type="date" @*@bind-value="dayEvent?.FromDate"*@ style="width:100%" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            <label>
                                Bitiş Tarihi
                            </label>
                        </div>
                        <div class="col-md-8">
                            <input type="date" @*@bind-value="dayEvent?.ToDate"*@ style="width:100%" />
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4">
                            <label>
                                Toplantı Konusu
                            </label>
                        </div>
                        <div class="col-md-8">
                            <input type="text" @*@bind-value="dayEvent?.Note"*@ style="width:100%" />
                        </div>
                    </div>
                    <br />
                    <div class="col-md-6" style="text-align:right">

                        <button class="btn btn-success" @onclick="SaveNote" style="float:left;margin-right:5px">Kaydet</button>
                        <button class="btn btn-danger" @onclick="CloseModal" style="float:left">Vazgeç</button>
                    </div>

                </div>
            </div>
        </div>
    </div>

}



<select @onchange="LoadCalender">
    @foreach (string monthName in monthNames)
    {
        <option>
            @monthName
        </option>
    }
</select>

<table class="table table-bordered table-striped">
    <thead>
        <tr>
            @for (var dayIndex = 0; dayIndex < days.Count(); dayIndex++)
            {
                <th>
                    @days[dayIndex]
                </th>
            }
        </tr>
    </thead>
    <tbody>
        @for (var weekIndex = 0; weekIndex < weeks.Count(); weekIndex++)
        {
            <tr>
                @for (var dayIndex = 0; dayIndex < weeks[weekIndex].HaftalikToplantilar.Count(); dayIndex++)
                {
                    var wIndex = weekIndex;
                    var dIndex = dayIndex;
                    <td @ondblclick="@(()=> OpenModal(wIndex,dIndex))">
                        @weeks[weekIndex].HaftalikToplantilar[dayIndex].TarihDegeri
                        <br /><br />
                        <label style="color:#c00; font-weight:bold">
                            @weeks[weekIndex].HaftalikToplantilar[dayIndex].Konu
                        </label>
                        <br /><br />
                        Hücre No: [@weekIndex,@dayIndex]
                    </td>
                }
            </tr>
        }
    </tbody>
</table>




@code {

    [Inject]
    public IBaseRepository<ToplantiTakvimi> ToplantiServisi { get; set; }

    [Parameter]
    public DateTime ToplantiPlanla { get; set; }
    protected string Title = "Ekle";

    ToplantiTakvimi dayEvent = new ToplantiTakvimi()
    {
        BaslangicTarihi = DateTime.Now,
        BitisTarihi = DateTime.Now,
        Konu = ""
    };

    protected IEnumerable<ToplantiTakvimi> Toplantilar { get; set; }

    protected IEnumerable<ToplantiTakvimi> TumToplantilariGetir()
    {
        Toplantilar = ToplantiServisi.GetAll();

        return Toplantilar;

    }

    protected override Task OnInitializedAsync()
    {
        TumToplantilariGetir();
        return Task.CompletedTask;
    }

    bool displayModal = false;
    List<string> monthNames = new List<string>();

    List<string> days = new List<string>();

    List<HaftalikToplanti> weeks = new List<HaftalikToplanti>();

    DateTime startDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);

    DateTime endDate = (new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1)).AddMonths(1).AddDays(-1);
    int selectedWeekIndex = -1;
    int selectedDayIndex = -1;
    public int ToplantiId { get; set; }


    protected override void OnInitialized()
    {
        var DateFormat = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat;

        monthNames = DateFormat.MonthGenitiveNames.ToList();

        GenerateCalenderHead();
        GenerateCalenderBody();
    }

    protected void LoadCalender(ChangeEventArgs e)
    {
        var month = e.Value.ToString();

        int monthIndex = DateTime.ParseExact(month, "MMMM", System.Globalization.CultureInfo.CreateSpecificCulture("tr-TR")).Month;

        startDate = new DateTime(DateTime.Now.Year, monthIndex, 1);
        endDate = (new DateTime(DateTime.Now.Year, monthIndex, 1)).AddMonths(1).AddDays(-1);

        GenerateCalenderHead();
        GenerateCalenderBody();
    }

    protected void GenerateCalenderHead()
    {
        var day1 = new List<string>();
        for (var dt = startDate; dt <= endDate; dt = dt.AddDays(1))
        {
            day1.Add(dt.ToString("dddd"));
        }
        days = day1.Distinct().ToList();
    }

    protected void GenerateCalenderBody()
    {
        weeks = new List<HaftalikToplanti>();
        //var dayEvents = ToplantiServisi.GetEvents(startDate,endDate);
        int flag = 0;
        HaftalikToplanti week = new HaftalikToplanti();
        List<ToplantiTakvimi> dates = new List<ToplantiTakvimi>();

        var totalDays = (int)(endDate - startDate).TotalDays;
        int countDays = 0;

        for (var dt = startDate; dt <= endDate; dt = dt.AddDays(1))
        {
            flag++;

            //var currentObject = ToplantiServisi.GetAll(x => x.EventDate.ToString("dd-MMM-yyyy") == dt.ToString("dd-MMM-yyyy"));

            var currentObject = ToplantiServisi.GetAll();

            dates?.Add(new ToplantiTakvimi()
            {
                Id = currentObject == null ? 0 : (int)currentObject.FirstOrDefault().Id,
                TarihDegeri = dt.ToString("dd-MMM-yyyy"),
                GunAdi = dt.ToString("dddd"),
                Konu = currentObject == null ? "" : currentObject.FirstOrDefault()?.Konu,
                
            });

            if (flag == 7)
            {
                week = new HaftalikToplanti();
                week.HaftalikToplantilar = dates;
                weeks.Add(week);

                dates = new List<ToplantiTakvimi>();

                flag = 0;
            }

            if (countDays == totalDays)
            {
                week = new HaftalikToplanti();
                week.HaftalikToplantilar = dates;
                weeks.Add(week);
                break;
            }
            countDays++;

        }



    }

    protected void CloseModal()
    {
        ResetModal();
    }

    protected void OpenModal(int wIndex, int dIndex)
    {
        selectedWeekIndex = wIndex;
        selectedDayIndex = dIndex;

        //var dayEventObj = ToplantiServisi.GetEvent(Convert.ToDateTime(weeks[wIndex].Dates[dIndex].DateValue));
        //dayEvent = dayEventObj;
        displayModal = true;
    }

    protected void SaveNote()
    {
        ToplantiServisi.AddUpdate(dayEvent);

        if (dayEvent.Id > 0)
        {
            weeks[selectedWeekIndex].HaftalikToplantilar[selectedDayIndex].Id = dayEvent.Id;
            weeks[selectedWeekIndex].HaftalikToplantilar[selectedDayIndex].Konu = dayEvent.Konu;

            ResetModal();
        }
    }

    protected void ResetModal()
    {
        displayModal = false;
        selectedDayIndex = -1;
        selectedWeekIndex = -1;

    }

}

<style type="text/css">

    #tblParent tbody tr td {
        width: 200px;
        height: 200px;
    }

    #divParent {
        position: relative;
    }

    #divModal {
        z-index: 10;
        position: absolute;
        border: 1px solid #000000;
        border-radius: 3px;
        background-color: #ffffff;
        left: 40%;
        top: 20%;
        width: 400px;
        min-height: 300px;
    }

    .modalHeading {
        text-align: center;
        font-size: 50px;
        text-decoration: underline;
        margin-bottom: 36px;
    }
</style>
